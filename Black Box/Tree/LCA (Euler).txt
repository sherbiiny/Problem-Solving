template<class T>
struct SparseTable {
    static const int B = 21;
    vector<array<T, B>> t;
    vector<int> lg;

    SparseTable(int n, vector<T> &v): t(n + 1), lg(n + 1) {
        lg[n] = __lg(n);
        for (int i = 0; i < n; ++i) lg[i] = __lg(i), t[i][0] = v[i];
        for (int j = 1; j < B; ++j)
            for (int i = 0; i + (1 << j) - 1 < n; ++i)
                t[i][j] = merge(t[i][j - 1], t[i + (1 << j - 1)][j - 1]);
    }

    T merge(T &l, T &r) { return min(l, r); }
    T query(int l, int r) {
        int j = lg[r - l + 1];
        return merge(t[l][j], t[r - (1 << j) + 1][j]);
    }
};

struct LCA {
    int n;
    vector<pair<int, int>> tour;
    vector<int> depth, in, par;
    SparseTable<pair<int, int>> table;

    LCA(int sz) {
        n = sz;
        in.resize(n);
        depth.resize(n);
        par.resize(n);
        table = SparseTable<pair<int, int>>(2 * n);
    }

    void dfs(int u, int p, int d, auto &adj) {
        in[u] = (int) tour.size();
        depth[u] = d;
        par[u] = p;
        tour.emplace_back(d, u);
        for (int v: adj[u]) {
            if (v == p) continue;
            dfs(v, u, d + 1, adj);
            tour.emplace_back(d, u);
        }
    }

    void build(auto &adj) {
        dfs(0, 0, 0, adj);
        table.build(tour);
    }

    int get(int u, int v) {
        return table.query(min(in[u], in[v]), max(in[u], in[v])).second;
    }

    int dist(int u, int v) {
        return depth[u] + depth[v] - 2 * depth[get(u, v)];
    }
};